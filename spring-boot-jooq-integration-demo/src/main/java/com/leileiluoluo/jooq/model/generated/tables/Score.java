/*
 * This file is generated by jOOQ.
 */
package com.leileiluoluo.jooq.model.generated.tables;


import com.leileiluoluo.jooq.model.generated.Indexes;
import com.leileiluoluo.jooq.model.generated.Keys;
import com.leileiluoluo.jooq.model.generated.School;
import com.leileiluoluo.jooq.model.generated.tables.records.ScoreRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Score extends TableImpl<ScoreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>school.score</code>
     */
    public static final Score SCORE = new Score();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScoreRecord> getRecordType() {
        return ScoreRecord.class;
    }

    /**
     * The column <code>school.score.student_no</code>.
     */
    public final TableField<ScoreRecord, Integer> STUDENT_NO = createField(DSL.name("student_no"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>school.score.course_no</code>.
     */
    public final TableField<ScoreRecord, Integer> COURSE_NO = createField(DSL.name("course_no"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>school.score.degree</code>.
     */
    public final TableField<ScoreRecord, BigDecimal> DEGREE = createField(DSL.name("degree"), SQLDataType.DECIMAL(4, 1).nullable(false), this, "");

    private Score(Name alias, Table<ScoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private Score(Name alias, Table<ScoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>school.score</code> table reference
     */
    public Score(String alias) {
        this(DSL.name(alias), SCORE);
    }

    /**
     * Create an aliased <code>school.score</code> table reference
     */
    public Score(Name alias) {
        this(alias, SCORE);
    }

    /**
     * Create a <code>school.score</code> table reference
     */
    public Score() {
        this(DSL.name("score"), null);
    }

    public <O extends Record> Score(Table<O> child, ForeignKey<O, ScoreRecord> key) {
        super(child, key, SCORE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : School.SCHOOL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SCORE_COURSE_NO);
    }

    @Override
    public UniqueKey<ScoreRecord> getPrimaryKey() {
        return Keys.KEY_SCORE_PRIMARY;
    }

    @Override
    public List<ForeignKey<ScoreRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SCORE_IBFK_1, Keys.SCORE_IBFK_2);
    }

    private transient Student _student;
    private transient Course _course;

    /**
     * Get the implicit join path to the <code>school.student</code> table.
     */
    public Student student() {
        if (_student == null)
            _student = new Student(this, Keys.SCORE_IBFK_1);

        return _student;
    }

    /**
     * Get the implicit join path to the <code>school.course</code> table.
     */
    public Course course() {
        if (_course == null)
            _course = new Course(this, Keys.SCORE_IBFK_2);

        return _course;
    }

    @Override
    public Score as(String alias) {
        return new Score(DSL.name(alias), this);
    }

    @Override
    public Score as(Name alias) {
        return new Score(alias, this);
    }

    @Override
    public Score as(Table<?> alias) {
        return new Score(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Score rename(String name) {
        return new Score(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Score rename(Name name) {
        return new Score(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Score rename(Table<?> name) {
        return new Score(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, BigDecimal> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
